package gg.sulfur.client.impl.modules.exploit

import gg.sulfur.client.api.module.ModuleData
import com.google.common.eventbus.Subscribe
import gg.sulfur.client.api.module.Module
import gg.sulfur.client.api.property.impl.NumberValue
import gg.sulfur.client.api.property.impl.StringValue
import gg.sulfur.client.impl.events.PacketEvent
import gg.sulfur.client.impl.events.UpdateEvent
import gg.sulfur.client.impl.utils.networking.PacketUtil
import net.minecraft.network.Packet
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C03PacketPlayer.C05PacketPlayerLook
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition

/**
 * @author Kansio
 * @created 8:28 PM
 * @project Client
 */
class GodMode(moduleData: ModuleData) : Module(moduleData) {

    private val mode = StringValue("Mode", this, "Set-Y", "Regen")
    private val packets = NumberValue("Packets", this, 20.0, 1.0, 200.0, true)
    private val health = NumberValue("Min-Health", this, 15.0, 1.0, 20.0, true)

    @Subscribe
    fun onPacket(event: PacketEvent) {
        when (mode.value) {
            "Set-Y" -> {
                if (event.getPacket<Packet>() is C03PacketPlayer) {
                    val packetPlayer = event.getPacket<C03PacketPlayer>()
                    packetPlayer.y += 3.5
                } else if (event.getPacket<Packet>() is C05PacketPlayerLook) {
                    val packetPlayer = event.getPacket<C05PacketPlayerLook>()
                    packetPlayer.y += 3.5
                } else if (event.getPacket<Packet>() is C04PacketPlayerPosition) {
                    val packetPlayer = event.getPacket<C05PacketPlayerLook>()
                    packetPlayer.y += 3.5
                }
            }
        }
    }

    @Subscribe
    fun onUpdate(event: UpdateEvent) {
        when (mode.value) {
            "Regen" -> {
                if (mc.thePlayer.health >= health.value) return
                if (!mc.thePlayer.onGround) return

                repeat(packets.value.toInt()) {
                    PacketUtil.sendPacket(C03PacketPlayer())
                }
            }
        }
    }

    init {
        register(mode, packets, health)
    }
}